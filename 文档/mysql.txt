systemctl stop mysqld

rm -rf /data/mysql/
mkdir -p /data/mysql/{data,binlog}
chown -R mysql. /data/mysql/


mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql/data

sql操作SQL入门：
------------------------------------------    
DROP DATABASE   --------一般不使用
DROP DATABASE oldboy;
ALTER DATABASE   ------一般不使用
ALTER DATABASE oldboy CHARSET utf8mb4;
SHOW CREATE DATABASE oldboy;
==================
表定义（表设计）：  -----开发人员
表名
表中的列（列名字、列的其他属性：数据类型、约束（主键、唯一、非空、正数等））

创建表：
use  oldboy
CREATE TABLE  stu(id int,name varchar(20),age int,gender varchar(20));   
SHOW TABLES;
DROP TABLE stu;   -----谨慎操作！！！！

CREATE TABLE  stu (
  id int(4) NOT NULL AUTO_INCREMENT,
  name char(20) NOT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=UTF8;

查看表结构:
desc stu;
查看建表语句:
show create table stu\G
创建一个和stu表结构一模一样的stu1表：   ----重点
create table stu1 like stu;
创建一个和stu内容一样的stu1表：
 create table stu1 selecet * from stu;

更改表名
alter table stu rename to student;
 
更改表结构：
---- 表定义的修改
DESC stu
-- 1、修改表名
ALTER TABLE student RENAME stu;
-- 2、添加列和列定义
ALTER TABLE stu  ADD  age INT;
-- 3、添加多个列
ALTER TABLE stu ADD gender VARCHAR(20) , ADD  qq INT;
-- 4、指定位置进行添加列
---4.1表中的首列添加一列
ALTER TABLE stu ADD classid VARCHAR(20) FIRST;
---4.2在age列后面添加一个telnum列
ALTER TABLE stu ADD telnum INT AFTER age;
---4.3 在name列前面添加一个birthday列
ALTER TABLE stu ADD birthday VARCHAR(30)  AFTER id;

-- 5、 删除列及列定义
ALTER TABLE stu DROP qq;
-- 6、修改列及列定义
--- 6.1 将id列的数据类型改为varchar类型
ALTER TABLE stu MODIFY id VARCHAR(20);
--- 6.2 将birthday列名字改为birth
ALTER  TABLE stu CHANGE birthday birth DATETIME;

--- 1、insert语句
----1.1往表中插入1行数据
INSERT INTO stu VALUES('linux45','stu01',NOW(),'zhang3',20,110,'男');
----1.2表中同时插入多行数据
INSERT INTO stu VALUES
('linux45','stu02',NOW(),'zhang5',22,112,'女'),
('linux45','stu03',NOW(),'zhang6',23,113,'男'),
('linux45','stu04',NOW(),'zhang7',24,114,'男');
----1.3指定列进行插入
学员alex学习python，个人信息不方便透露
python8,stu250,alex
INSERT INTO stu(classid,id,NAME) VALUES
('python8','stu250','alex');

----1.4 将A表数据插入到B表中
CREATE TABLE student LIKE stu;
INSERT INTO student SELECT * FROM stu;

-----------------------
--- 2、delete
DELETE FROM student;  
注：一般业务系统中很少有这个全表删除的需求
即使有全表数据删除的需求，也很少时候delete语句，因为很慢，逻辑删除，一行一行执行。
如果有需求，一般使用以下命令,物理删除，效率较高。
TRUNCATE TABLE student; 
DELETE FROM student WHERE NAME='alex';

--- 3、update
UPDATE student SET gender='女' WHERE id='stu04';

-- DQL语句：
--- 1、数据库对象定义查询
SHOW DATABASES;
SHOW TABLES;
USE world
SHOW TABLES;
SHOW TABLES FROM world;
SHOW CREATE DATABASE oldboy;
SHOW CREATE TABLE stu;
DESC stu

--- 2、数据内容查询
SELECT  列  FROM   表;
---- 2.1 获取world.city中所有的列值
USE world
SELECT *  FROM city;
SELECT *  FROM world.city;
---- 2.2 获取city表中NAME,countrycode ,population三列的数据
SELECT NAME,countrycode ,population FROM world.city;
---- 2.3 获取city表中和中国有关的城市信息
SELECT  *  FROM world.`city` WHERE countrycode='USA';
----2.4 获取city表中以he开头的城市信息
SELECT  *  FROM world.`city` WHERE NAME LIKE 'he%';
SELECT  *  FROM world.`city` WHERE NAME LIKE '%he%';   -----这种方式禁止使用，性能极低
----2.5 获取city表中he开头的城市，并且是中国的城市信息。
SELECT  *  FROM world.`city` WHERE NAME LIKE 'he%' AND countrycode='CHN';
----2.6 获取city表中 中国和日本的所有城市信息
SELECT  *  FROM world.`city` WHERE countrycode='JPN' OR countrycode='CHN'

----2.7 中国或日本人口大于100w城市名字和人口数-----能够看懂就
SELECT cj.name,cj.population   FROM 
(SELECT  *  FROM world.`city` WHERE countrycode='JPN' OR countrycode='CHN') AS  cj
WHERE cj.population > 1000000 ;

----2.8 查询世界上少于100人的城市

SELECT * FROM world.city WHERE Population<100;

----2.9 查询世界上少于100人的城市所在的国家的具体名字是什么？
SELECT * FROM world.city WHERE Population<100;  ----->代号是PCN？PCN是什么？
SELECT CODE ,NAME  FROM country WHERE CODE='PCN';  --->PCN  ---> Pitcairn

SELECT country.name FROM city,country
WHERE city.Population<100 AND city.`CountryCode`=country.code;

SELECT co.name FROM city AS ci ,country AS co
WHERE ci.Population<100 AND ci.`CountryCode`=co.code;
----2.10 查询世界上大于100w 小于200w城市信息
SELECT * FROM city WHERE population BETWEEN 1000000 AND 2000000;

----2.11 查询中国所有城市信息，并以人口的降序排序输出
SELECT  *  FROM world.`city` WHERE countrycode='CHN' 
ORDER BY Population DESC;

SELECT  *  FROM world.`city` WHERE countrycode='CHN' 
ORDER BY Population DESC LIMIT 10;

SELECT  *  FROM world.`city` WHERE countrycode='CHN' 
ORDER BY Population DESC LIMIT 20;

SELECT  *  FROM world.`city` WHERE countrycode='CHN' 
ORDER BY Population DESC LIMIT 10,5;

SELECT  *  FROM world.`city` WHERE countrycode='CHN' 
ORDER BY Population DESC LIMIT 5 OFFSET 10;

--------
LIMIT  <获取的行数> [OFFSET <跳过的行数>]
或者  LIMIT [<跳过的行数>,] <获取的行数>  
--------

生产：35G，OSS库是核心库25G，OSS_extra 10G
    1、每天晚上23:00做全备
    2、周四上午10:00,业务人员误删除drop database OSS
思路：
      1、停业务
      2、找一个备用库
      3、恢复周三全备到备用库
      4、通过截取二进制日志:起点：23:00全备之后的position 结束点：drop之前（drop event 的at）
      5、把备用库中的OSS导出，导入到生产库
      6、启动生产库继续业务
 结果：     
      

--flush-logs （-F）  在备份的时候，刷新出一个新的二进制日志文件。
--master-data=2    “打标签” mysql-bin.000015 |      120 



mysqldump  -uroot -p123 -A --triggers -R --master-data=2  >/backup/full.sql
mysqlbinlog  --start-position=120 --stop-position=1200 mysql-bin.000015 >/backup/inc.sql

-------
模拟生产环境：
pkill mysqld
\rm -rf /application/mysql/data/*
\rm -rf /data/mysql/*
/application/mysql/scripts/mysql_install_db --user=mysql --basedir=/application/mysql --datadir=/application/mysql/data/  
/etc/init.d/mysqld start
source world.sql
mysqldump  -uroot -p123 -A --triggers -R --master-data=2  >/backup/full.sql
create database oldboy;
use oldboy;
create table t1 (id int,name varchar(20));
insert into t1 values(1,'a'),(2,'b'),(3,'c');
commit;
use world 
delete from city where countrycode='JPN';
commit;
drop database world;
drop database oldboy
要求:恢复到drop database world之前的状态。
-----------

mysql>source /backup/full.sql
vim /backup/full.sql   ---22行
mysql-bin.000003 MASTER_LOG_POS=689712
mysql -e "show binlog events in 'mysql-bin.000003'"|tail 
mysqlbinlog --start-position=689712 --stop-position=697414  /data/mysql/mysql-bin.000003>/backup/bin.sql
mysql>source /backup/bin.sql




案例模拟：
1、创建备份需要的目录
mkdir full  inc1 inc2
create table test (id int,name  char(20),stuid INT)
2、周日全备
innobackupex --user=root --password=123 --no-timestamp /backup/full/
3、模拟数据变化
use oldboy
insert into test values(8,'outman',99);
insert into test values(9,'outgirl',100);
commit;
4、周一增量备份 
 innobackupex --user=root --password=123 --incremental --no-timestamp --incremental-basedir=/backup/full/ /backup/inc1

5、模拟数据变化
use oldboy

insert into test values(8,'outman1',119);
insert into test values(9,'outgirl1',120);
commit;
6、周二的增量备份
innobackupex --user=root --password=123 --incremental --no-timestamp --incremental-basedir=/backup/inc1 /backup/inc2

6.1 再插入新的行操作
use oldboy
insert into test values(10,'outman2',19);
insert into test values(11,'outgirl2',10);
commit;


7、模拟场景，周二下午2点误删除test表
use oldboy;
drop table test;

8、准备恢复

8.3 准备xtrabackup备份
	innobackupex --apply-log --redo-only full
	innobackupex --apply-log --redo-only --incremental-dir=/xbk/inc1 full
	innobackupex --apply-log  --incremental-dir=/xbk/inc2 full
	innobackupex --apply-log full
    8.4 确认binlog起点
		 cd /xbk/inc2/
		 cat xtrabackup_binlog_info 
		 mysql-bin.000002	2681
    8.5  截取到drop操作之前的binlog
			mysqlbinlog  --start-position=1121 /tmp/mysql-bin.000003 
			找到drop之前的event和postion号做日志截取，假如 1437
			mysqlbinlog  --start-position=1121 --stop-position=3297    /tmp/mysql-bin.000003 >/tmp/incbinlog.sql
			
			
	8.1 关闭数据库、备份二进制日志
		/etc/init.d/mysqld stop
		cd /application/mysql/data/
		cp mysql-bin.000001 /tmp

	8.2 删除MySQL所有数据
		cd /application/mysql/data/
		rm -rf *

9、恢复数据
	恢复xtrabackup数据
	innobackupex --copy-back /backup/full/
	chown -R mysql.mysql /application/mysql/data/
	/etc/init.d/mysqld start
	恢复binlog
	set sql_log_bin=0
	source /tmp/incbinlog.sql





原理：第一次开启主从

1、从库通过手工执行change master to 语句连接主库，提供了连接的用户一切条件（user、password、port、ip）
	并且让从库知道，二进制日志的起点位置（file名  position号）
2、从库的IO和主库的dump线程建立连接
3、从库根据change master to 语句提供的file名和position号，IO线程向主库发起binlog的请求
4、主库dump线程根据从库的请求，将本地binlog以events的方式发给从库IO线程
5、从库IO线程接收binlog evnets，并从放到本地relay-log中，传送过来的信息，会记录到master.info中。
6、从库应用relay-log，并且把应用过的记录到relay-log.info,默认情况下，已经应用过的relay会自动被清理purge。

到此位置，一次主从复制就完成




主从复制中重要线程:

主库:dump线程，发送主库的binlog到从库
从库：
    IO线程：
        1、读取master.info 
        2、连接主库，通过用户名密码
        3、向主库请求新的binlog
        4、接收主库发过来的binlog
        5、将binlog写入relay-log文件中
        6、更新master.info文件
    SQL线程：
        1、读取relay-log.info
        2、执行relaylog日志新事件
        3、更新relay-log.info




