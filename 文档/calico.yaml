---
# Source: calico/templates/calico-etcd-secrets.yaml
# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR4akNDQXE2Z0F3SUJBZ0lVTUR0cmlZQ09HOHNKSXZKVE9PbkpIRGViay9Jd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEV6QVJCZ05WQkFvVENtdDFZbVZ5Ym1WMFpYTXhEREFLQmdOVkJBc1RBMnM0Y3pFVE1CRUdBMVVFCkF4TUthM1ZpWlhKdVpYUmxjekFlRncweU1ERXlNalV4TlRRNE1EQmFGdzB5TlRFeU1qUXhOVFE0TURCYU1Ha3gKQ3pBSkJnTlZCQVlUQWtOT01SQXdEZ1lEVlFRSUV3ZENaV2xLYVc1bk1SQXdEZ1lEVlFRSEV3ZENaV2xLYVc1bgpNUk13RVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TVF3d0NnWURWUVFMRXdOck9ITXhFekFSQmdOVkJBTVRDbXQxClltVnlibVYwWlhNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURHclFwZXMybi8KZFZEaUVRZ0xlM1poMTF6bnRKWERqMGR4SHJ1RFNUWDNmUkNHWFpwSXAvOTVQSEFxUkJyMVVnYWp5QUJhTVNSbAptc2VRaUtMR0NwYTVCVDJld0E3Mm5WUHBjdkh3QVNrUmxFNjMvVjhhRzN2Q0UzS3dUSE5SYlhFRWlXTllacmdrCmxJTGl4d1B6czd5aEZnQTdMOWFQblhOUUs0bXdCcm40a3hTSloybzBkMHUxR0dLUVpYRk5BOTd1d3h1NGlrUXQKSUxQQTNwR1pXdFRLZzJMSDZMcWh2WUs5OGxuTHVHL21wSlNXcFhia1FTSnpVckVzQWNsMmxOOUNweHozOXNRWgo0RFc1bTFIbXlOaVZjbDlxVmpydVdJQ3pydkhIL25ZU1ptMVIyc210VitpNUhYc3o1R2JJSXZPamJSZURiZ2MyClVwMU9Ib3hUcGk0ekFnTUJBQUdqWmpCa01BNEdBMVVkRHdFQi93UUVBd0lCQmpBU0JnTlZIUk1CQWY4RUNEQUcKQVFIL0FnRUNNQjBHQTFVZERnUVdCQlF3QjdheVBQNDNOc0pWVlZxYy93S0ZONC9aQkRBZkJnTlZIU01FR0RBVwpnQlF3QjdheVBQNDNOc0pWVlZxYy93S0ZONC9aQkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVlDUDMwRkVmCjBxemlMWStZVlY5YmtTSXNXbkhRSE1UaDVZbTRsT1Y5dVBMTnFBQ2lieitiQVFLeTBNcEl0aGp1ZnRVZUZXT0oKd1lqY0owR1czZWZqcGpBdHdIU1Z4bE9GMWRCekRHZUdUR3dQSDJyYlRJSGFoTDdENWNYNWNnUldMZFlHN3IxTgovQWRRVWQxcUh3SzNHVVA5THZ3MHVncHI5anZmQlNHbVhUZGVYdnlLSWFGdDB2Qm1GbkhFd2pIOVNINHVkSk1tCkJIWjlHWjMvQ01VYXRnTmtmZElZV1ozT0hjbzFERVVHS2JOQ1FWMzZDb1hRUnZPeXVNZTdzMjdPQlZ6QVdtS0QKWWI5MU5yVlorK2xPQkZ6emtFOEloSU1veldGOXNSUTJ1L3hZakM4QVdyVUFQZFJpVis3VEkvZmNGWWVIVDlFbQpJb1VGZHhUckRjZ3RQUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMDdIRjZVL2JySGxIeHVPMm5LNFdKWmRzZWZQS1hWNGpqdGkxQUg3SnZtZDJTVTFKCitsa05Rb0NydWZMaVNXcXBocm5UTWxMOTJ2bDI2dWplNy9JZEZxSTBOVnk2MzM3UGNUblBGRlU4R2JkRkhFNnUKN1RzR2RTQVZUQVpLWmhKTFI5VGtUbEp3OGk5NStzaCtpZWZGNS84bklmdU9Tdml5YlhJSFFlZ0NnbkZ2TnFEdApXcU8vYW8xYnJvSmV0Wk5QRWdvL2VDc0VTSytpaFk1NHJ1WmVKaUlXNlFDOEI3bEM0NHpXZEo2cVVXN2JDeGx1CnpycGJRWTRKc1VMbFB4RTIybnBObDN6N3dRcFBNeEV0WXZQamhQaUdLUjBzbUdjT3NJakVxTFQzOFM1bjNwMmoKUHVzWkxmU2NLZUgwQ2k5aklxQU1OaWh3U0JzbGN4dVRQaXdnVFFJREFRQUJBb0lCQUNvblNodU5WVmJneDVRcApIK0hQSUlYWHd6ZjlmWnhkOUlLclVFK0s3NjFFZU45YnpwRlZUamloMnBBcWR6amJUbXFQY2lpaE1mOTZrVjF4CmhZTU9HUkM2dDk2d1dsM0txSkFKVE56bHBCUVMxR1l3bk5DTVlsck1TckZheDFIUDdzR2MrT0ZIdFVua2ZrdWIKeE9hOUNrR0tJMGEzQ3J5UERTaVIvalAzZVJoMEZPd29NTm1LL3NRb2k3UjZkdUhSTDYyaDgxcm5YRk5sTWZabgptWk9HWjRLU3c0Q2tudWtBQkZ0R1J1ZXlrVHM1aXFvV2NlQktJS0dNMDJjR1ZQSU15cTJWb1ZIV3k1N1F6VnJGClRzaUk2Wi9WZGwzTFdFNlVIOVN1bS9nTFhRMVEyZkxTTkhDK0Q0cTFmN1FsTXlWdzJ2WTJ5U2xMMkZsVVlieTgKYXdrV2pBRUNnWUVBLzdtRmVyRm5NOGhMQ0wyQVBrMGxlMlBVSXdRQ0V1d1BGM2FWbWF2OGNhZTVzZ3FVZXE2NwpDRFQ4Y2JTMVNNSWVvdWp3Z2M4VzR6cTJJNWNDckNGY2wyS0xVZGNyWW5aL0FkaG9CK05ZRFN4OVNQUW1zZTJsCk5iVGpCVTZMeURGbGhpdVgrTVNWMzNkcTZuRjV1RzErQ3lqRGZiWDJwMVJtYTZYWFhBZmdMODBDZ1lFQTArd2QKNWwzVkZIOWswQ2ZHZHZPMUZjLy90cjVDSlY3emlQeW9tVzJOSjYyanl0bFI4QzQxeS9wdCsyaGFNdlJKS016aQpIQkNNVjVZMnlWamZnemlWOTVSOVdFWld2Nzl6ekQ2T2IrT0E5WVdVTUJRREhFV3V4Wi85SmIxSFFkeWZsVDA5ClVGYmxJUThsZTdQV25IZXlBTE1DcWpLNk5TS3hrUEFHUlNaV01vRUNnWUVBNUxJVGoyQnNQVUVZNlo0ZnZKZmQKdDNYVjErTFR2L3hnbXNrd2pSZmtVZmgvOTV2Q29kejE0eWNQeE5pcGI0STdSOUl1bE1pUlhYRzZSaVhjKy9keQpDT2pXVThDc1NnaFRHV0ZoMS93WFdPQzZ3cTJtbFdWRVpMMTZjZHFHNCtoWk5SNXpjTVRPaStVT050QjQzTmorCjZoZndqTkpZM2RoN0tEWk9YVDJsM3RrQ2dZRUF0cjMzOW90WlQraWV4VVJYUm9IVzJHMVpJM3Npek5qNUJscGgKQkpUTVVMZlI4dnk5UkhDRW9WVmMrNXM3bEk3RWUzTlpVendOMlFWR1R3L2RCV21KSUVvaVlEbWZXbys4U2haegpleFppUU5Xa09HVTVYV3JWVDhNclp4eTEwcHh0M0NKSHVmeUVicUtCL3c3UDlITGV3dTJhVWF1V21IVkhTeVUvCk11ZmhFb0VDZ1lCeExQTXcyekJDemZSYzg3VkdqaUZzTHVJK2JzRUNwV1MzSVQzREdOY1JKUFRwT2ZkS0dvbUgKMGgyNmtQejhsVG9xVG5sQ1JnRjJ5WDRpMUxMZDRJbmoxY05nWW9HRmkyandiZTBaMXUxdUVISmRWWXhGU0RwTgpaUFl6ZzlybHVjZnJ0WlhYWTB1Z2ZnZ0djSXRaV1RZaUZwMFVEQ0VlWmZucWx6QW4vODFoZmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQvekNDQXVlZ0F3SUJBZ0lVYTgxb2cyUi90RVFkaWkrbk1sMEQ4VENzNW9Vd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbAphVXBwYm1jeEV6QVJCZ05WQkFvVENtdDFZbVZ5Ym1WMFpYTXhEREFLQmdOVkJBc1RBMnM0Y3pFVE1CRUdBMVVFCkF4TUthM1ZpWlhKdVpYUmxjekFlRncweU1ERXlNalV4TlRRNU1EQmFGdzB6TURFeU1qTXhOVFE1TURCYU1HUXgKQ3pBSkJnTlZCQVlUQWtOT01SQXdEZ1lEVlFRSUV3ZENaV2xLYVc1bk1SQXdEZ1lEVlFRSEV3ZENaV2xLYVc1bgpNUk13RVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TVEwd0N3WURWUVFMRXdSbGRHTmtNUTB3Q3dZRFZRUURFd1JsCmRHTmtNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTA3SEY2VS9ickhsSHh1TzIKbks0V0paZHNlZlBLWFY0amp0aTFBSDdKdm1kMlNVMUorbGtOUW9DcnVmTGlTV3FwaHJuVE1sTDkydmwyNnVqZQo3L0lkRnFJME5WeTYzMzdQY1RuUEZGVThHYmRGSEU2dTdUc0dkU0FWVEFaS1poSkxSOVRrVGxKdzhpOTUrc2grCmllZkY1LzhuSWZ1T1N2aXliWElIUWVnQ2duRnZOcUR0V3FPL2FvMWJyb0pldFpOUEVnby9lQ3NFU0sraWhZNTQKcnVaZUppSVc2UUM4QjdsQzQ0eldkSjZxVVc3YkN4bHV6cnBiUVk0SnNVTGxQeEUyMm5wTmwzejd3UXBQTXhFdApZdlBqaFBpR0tSMHNtR2NPc0lqRXFMVDM4UzVuM3AyalB1c1pMZlNjS2VIMENpOWpJcUFNTmlod1NCc2xjeHVUClBpd2dUUUlEQVFBQm80R2pNSUdnTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUYKQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVWVyc2FJdVhrYlJndAo1QU16MFVLaW5YZzF6RG93SHdZRFZSMGpCQmd3Rm9BVU1BZTJzanorTnpiQ1ZWVmFuUDhDaFRlUDJRUXdJUVlEClZSMFJCQm93R0ljRWZ3QUFBWWNFQ2dBQUg0Y0VDZ0FBSUljRUNnQUFJVEFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQWRia2lSSGhuRzJsc0dTTUxPbGR4VTBMOEZvdWRtVUY0aXFpQkMrWi9jQlY1NHZsSUJWQ2pTZ1RDc2c5RwpNWlJmUHhnbzVRUWpBVDlxejFMTVJHaElzdVFySHVFVVBhWHIxRXNpb1d5Z3Q3VHRnbkhPdUJuYzZiTngwNDRPCnpuNmlKWkhObHFqWGtKb0NoUW5QUTlEWTJhOEVDWmdUUEhEcElncEM5Tm52dkhsam1WMm5UeGxFSk1scVR5SSsKSks4Ryt6dVlETHFUbmVlT016c3ZiR0t0bW9iVlZTdmlPaisxTEpLTS9sWHR3dmRMWTJLRURPUEFiNEtzWWt2KworVXF1OVFDTFVWNGlGUFYvUzljM014L0g2UmYveEs0eEhka2xNeERiZFlUQ1hlbkJvSjMxTDh4d3Uxa3B0Y0tIClM1VEs1WGFYdUtMVmFlZ25vMDY4TUZxVUN3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: calico/templates/calico-config.yaml
# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://10.0.0.31:2379,https://10.0.0.32:2379,https://10.0.0.33:2379"
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
  # Typha is disabled.
  typha_service_name: "none"
  # Configure the backend to use.
  calico_backend: "bird"
  # Configure the MTU to use for workload interfaces and tunnels.
  # - If Wireguard is enabled, set to your network MTU - 60
  # - Otherwise, if VXLAN or BPF mode is enabled, set to your network MTU - 50
  # - Otherwise, if IPIP is enabled, set to your network MTU - 20
  # - Otherwise, if not using any encapsulation, set to your network MTU.
  veth_mtu: "1440"

  # The CNI network configuration to install on each node. The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "log_file_path": "/var/log/calico/cni/cni.log",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }

---
# Source: calico/templates/calico-kube-controllers-rbac.yaml

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
      - get
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---

---
# Source: calico/templates/calico-node-rbac.yaml
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: calico/cni:v3.16.4
          command: ["/opt/cni/bin/install"]
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
          securityContext:
            privileged: true
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: calico/pod2daemon-flexvol:v3.16.4
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node. This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: calico/node:v3.16.4
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Never"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the Wireguard tunnel device.
            - name: FELIX_WIREGUARDMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "172.16.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
            - name: policysync
              mountPath: /var/run/nodeagent
            # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
            # parent directory.
            - name: sysfs
              mountPath: /sys/fs/
              # Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.
              # If the host is known to mount that filesystem already then Bidirectional can be omitted.
              mountPropagation: Bidirectional
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        - name: sysfs
          hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-kube-controllers.yaml
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-kube-controllers
          image: calico/kube-controllers:v3.16.4
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system


