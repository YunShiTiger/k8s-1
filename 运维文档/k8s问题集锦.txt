1、Pod偶尔存活检查失败
现象:
Pod偶尔存活检查失败，导致Pod重启，业务偶尔连接异常。
排错:
      之前从未遇到这种情况，经排查发现那段时间的流量很大，推测跟连接数或并发量有关。对比了一下生产与测试环境的差异，最后发现是tcp_max_syn_backlog大小导致的。
TCP 连接建立会经过三次握手，server 收到 SYN 后会将连接加入 SYN 队列，当收到最后一个 ACK 后连接建立，这时会将连接从 SYN 队列中移动到ACCEPT 队列。
在 SYN 队列中的连接都是没有建立完全的连接，处于半连接状态。如果 SYN 队列比较小，而短时间内并发新建的连接比较多，同时处于半连接状态的连接就多，
SYN 队列就可能溢出，导致部分新连接无法建立。tcp_max_syn_backlog可以控制syn队列大小，改成 8096 后就可以解决问题。



2、部分节点无法启动pod
有时候，我们部署了应用之后，发现在部分工作节点上pod无法启动（一直处于ContainerCreating的状态）：

通过排查日志最终我们得到重要信息如下所示：

NetworkPlugin cni failed to set up pod "demo-deployment-675b5f9477-hdcwg_default" network: failed to set bridge addr: \
"cni0" already has an IP address different from 10.0.2.1/24
这是由于当前节点之前被反复注册，导致flannel网络出现问题。可以依次执行以下脚本来重置节点并且删除flannel网络来解决：


3、什么是 Spring Boot？
Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。

4、Spring Boot 有哪些优点？
Spring Boot 主要有如下优点：
	
	容易上手，提升开发效率，为 Spring 开发提供一个更快、更广泛的入门体验。
	开箱即用，远离繁琐的配置。
	提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。
	没有代码生成，也不需要XML配置。
	避免大量的 Maven 导入和各种版本冲突。

5、SpringBoot四个主要特性

	1、SpringBoot Starter：他将常用的依赖分组进行了整合，将其合并到一个依赖中，这样就可以一次性添加到项目的Maven或Gradle构建中；

	2、自动配置：SpringBoot的自动配置特性利用了Spring4对条件化配置的支持，合理地推测应用所需的bean并自动化配置他们；

	3、命令行接口：（Command-line-interface, CLI）：SpringBoot的CLI发挥了Groovy编程语言的优势，并结合自动配置进一步简化Spring应用的开发；

	4、Actuatir：它为SpringBoot应用的所有特性构建一个小型的应用程序。但首先，我们快速了解每项特性，更好的体验他们如何简化Spring编程模型。
6、最近在安装生成环境，遇到一个内存爆掉的问题。k8s集群环境下，搭建web应用，采用java -jar 方式启动springboot项目。

java虚拟机在没有设置使用内存的情况下，默认占用系统1/4的内存。pod中执行也是一样的，jvm识别是物理主机的内存，而不是k8s给pod分配的内存。因此在没有给jvm指定的情况下，由于生产环境物机器性能较好，物理内存很大，jvm默认占用的内存超出了k8s分配给pod的内存，导致pod内存溢出，从而k8s自动重启pod。
